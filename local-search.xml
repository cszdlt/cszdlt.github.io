<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>MySQL-锁篇</title>
    <link href="/2024/06/09/MySQL-%E9%94%81%E7%AF%87/"/>
    <url>/2024/06/09/MySQL-%E9%94%81%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<h3 id="MySQL-的锁"><a href="#MySQL-的锁" class="headerlink" title="MySQL 的锁"></a>MySQL 的锁</h3><h4 id="MySQL-都有哪些锁"><a href="#MySQL-都有哪些锁" class="headerlink" title="MySQL 都有哪些锁"></a>MySQL 都有哪些锁</h4><p>MySql 的锁一般分为 <strong>独占锁(X锁)</strong> 和 __共享锁(S锁)__。对于锁的粒度，又有如下划分：</p><ul><li>全局锁：会将整个 MySQL 实例锁住，一般只会在备份时使用</li><li>表级锁：表级锁有四种，即：<ul><li>表锁： 表锁会对整个表使用 X锁 或 S锁。</li><li>元数据锁(MDL)： 元数据锁锁的是表结构，对于 CURD 操作，会使用 MDL 读锁；对于修改表结构的操作，则会使用 MDL 写锁。对于 CURD 操作，MDL 读锁在 CURD 操作时创建，事务结束后释放。因此如果事务未结束时，无法对事务使用到的表结构做修改。</li><li>意向锁： 在对行做读写操作前，会先对表加上意向读&#x2F;写锁，意向锁间不互斥。意向锁的主要目的是方便加表锁时，可快速发现该表在被使用，需要等待。</li><li>auto-inc： 该锁是一个自增锁，用于主键自增。该锁在插入语句时锁定，插入语句结束后释放，该锁是 X 锁，锁的是表的 insert 操作。但是在批量插入时，该锁的并发效率较低，因此引入了轻量锁。轻量锁不需要等待语句结束，在自增结束后就会立马释放。在 MySQL 中，通过 <code>innodb_autoinc_lock_mode</code> 来控制使用的是 auto_inc 还是 轻量锁。<blockquote><p>在使用轻量锁模式时，由于自增结束后就会立马释放，存在批量 insert 时，自增 id 不连续的情况，因为有可能批量 insert 过程中，其他事务也在 insert。这时如果 binlog 的模式是 statement，会出现主从不同步问题。</p></blockquote></li></ul></li><li>行级锁：行级锁有三种，即：<ul><li>记录锁(record lock): 记录锁会对索引加锁，防止其他事务对索引内的内容做修改。</li><li>间隙锁(gap lock)：间隙锁也是对索引加锁，但是锁的是被锁索引与上一个索引之间的间隙，目的是不允许其他事务往这个被锁的间隙中添加数据，从而防止幻读。间隙锁锁的是个 <strong>左开右开</strong> 的区间。InnoDB 在插入数据时，会判断在 B+ 树中符合要求的位置的下一个位置是否存在间隙锁，如果存在的话则需要等待间隙锁释放。</li><li>临键锁(next-key lock): 临键锁是记录锁+间隙锁，锁的是个 <strong>左闭右开</strong> 的区间，因为间隙锁是左闭右闭，而记录锁会锁定当前索引，因此临键锁自然就是 __左闭右开__。 、<blockquote><p>这三种行级锁都存在 X锁 和 S锁。但是间隙锁的 X锁 与 S锁 没什么区别，因为间隙锁只是不允许其他事务向区间中插入数据，因此间隙锁间是兼容的。</p></blockquote></li></ul></li></ul><h4 id="MySQL-是如何加行级锁的"><a href="#MySQL-是如何加行级锁的" class="headerlink" title="MySQL 是如何加行级锁的"></a>MySQL 是如何加行级锁的</h4><p>既然行级锁有三种，那这三种锁又该在什么时候使用呢？分以下几种情况讨论：</p><ul><li>对于唯一索引：<ul><li>在等值查询时，如果这个值存在，那么会给这个值的对应索引添加记录锁，之所以不加间隙锁是因为这个索引已经存在了，其他事务无法再插入相同值的索引，因此只需要记录锁保证该记录无法被修改或删除即可。如果这个值不存在，那么会给大于这个值的第一个索引添加间隙锁，这样就能保证不会有其他事务插入该值，从而避免幻读。(InnoDB 的 B+ 树中会有两个特殊节点作为索引边界)</li><li>在范围查询时，分为以下几种情况：<ul><li>在使用 大于等于 作为查询条件时，会对符合 等于 条件的索引加上记录锁，对符合 大于 条件的索引(包含特殊节点 supremum pseudo-record)加上临键锁。</li><li>在使用 大于 作为查询条件时，会对所有符合条件的索引加上临键锁。</li><li>在使用 小于等于 作为查询条件时，会对所有符合 小于 条件的索引加上临键锁。这时如果存在 等于 条件的索引，则为该索引添加临键锁；如果不存在 等于 条件的索引，则为第一个大于该值的索引添加间隙锁。</li><li>在使用 小于 作为查询条件时，会对所有符合 小于 条件的索引加上临键锁，对第一个大于等于该值的索引添加间隙锁。</li></ul></li></ul></li><li>对于非唯一索引，因为非唯一索引肯定是个二级索引，因此还需要考虑到对主索引加锁。有如下几种情况：<ul><li>在等值查询时，会给符合条件的二级索引添加临键锁，并且会给对应的主索引添加记录锁，对第一个大于该值的二级索引添加间隙锁。如果不存在符合条件的索引，则只给大于该值的第一个二级索引添加间隙锁。</li><li>在范围查询时，分为以下几种情况：<ul><li>在使用 大于 或者 大于等于 作为查询条件时，对所有符合条件的索引(包含特殊节点 supremum pseudo)加上临键锁，并对对应的主索引添加记录锁。与唯一索引不同的是，即使符合 等于 条件，一样需要使用临键锁。</li><li>在使用 小于 或者 小于等于 作为查询条件时，会对所有符合条件的索引加上临键锁，对第一个大于等于该值的索引添加间隙锁。<blockquote><p>对于非唯一索引，主索引会作为最弱比较条件参与排序。因此在有二级索引 (x) 时，实际上比较的是 (x, key)。对于 (10, 15) 和 (20, 5) 这两个相邻索引，即使对 (20, 5) 加了 gap 锁，一样可以插入 (10, 10) 或 (20, 6) 这样的索引，因为在排序上，这两个索引不属于 (10, 15) 到 (20, 5) 区间中。</p></blockquote></li></ul></li></ul></li><li>对于没加索引的查询，为了防止幻读，会对全表数据添加临键锁，相当于锁全表。</li></ul><blockquote><p>对一个只含有间隙锁的索引做删除操作时，间隙锁会下推到下一个索引上。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL 学习(2)</title>
    <link href="/2024/06/06/MySQL-%E5%AD%A6%E4%B9%A0-2/"/>
    <url>/2024/06/06/MySQL-%E5%AD%A6%E4%B9%A0-2/</url>
    
    <content type="html"><![CDATA[<h3 id="InnoDB-的多版本并发控制-MVCC"><a href="#InnoDB-的多版本并发控制-MVCC" class="headerlink" title="InnoDB 的多版本并发控制(MVCC)"></a>InnoDB 的多版本并发控制(MVCC)</h3><h4 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h4><p>事务遵循 ACID 原则，即：</p><ul><li>原子性： 一条事务内的操作，要么全部成功，要么全部失败，不存在部分成功部分失败的情况。(undo log)</li><li>一致性： 事务执行时，不论哪条事务先执行，结果都是一致的，不存在 <strong>先执行A，再执行B</strong> 和 <strong>先执行B，再执行A</strong> 时，A 的结果不一致的情况。</li><li>隔离性： 多条事务同时执行时，事务之间不会互相干扰。(MVCC和锁)</li><li>持久性： 已提交事务的改动不会因为断电崩溃等原因丢失。(事务提交前会将操作写入日志。redo log)</li></ul><h4 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h4><p>在讨论隔离级别之前，先介绍一下并发处理事务时，可能出现的几个问题：</p><ul><li>脏读：指的是在多事务并发处理时，A 事务读到了 B 事务未提交的修改，这时如果 B 事务因为某原因回滚，则 A 读到的就是个脏数据。</li><li>不可重复读：指的是在多事务并发处理时，A 事务在多次读取同一行时，读到了不同的信息。可能的原因是在 A 事务在读取该行后，其他事务对该行做了修改。</li><li>幻读：指的是在多事务并发处理时，A 事务在多次读取某个范围的数据时，数据数量发生了变化。可能的原因是在 A 事务在读取该范围后，其他事务对该范围内的数据做了增删操作。</li></ul><p>这几个问题也对应着几个隔离级别。事务的隔离级别分为四种：</p><ul><li>读未提交(Read uncommitted)：即事务的修改在未提交时，即可被别的事物读取。会遇到 脏读、不可重复读、幻读 问题。</li><li>读提交(Read committed)：即事务的修改在提交后，即可被别的事物读取。会遇到 不可重复读、幻读 问题。</li><li>可重复读(repeatable Read)：即在一次事务中对相同行的多次读取，得到的都是相同的值。会遇到 幻读 问题。</li><li>串行化(serializable)：会对记录加上读写锁，在多个事务对这条记录进行读写操作时，如果发生了读写冲突的时候，后访问的事务必须等前一个事务执行完成，才能继续执行.</li></ul><h4 id="InnoDB-如何支持事务"><a href="#InnoDB-如何支持事务" class="headerlink" title="InnoDB 如何支持事务"></a>InnoDB 如何支持事务</h4><p>InnoDB 通过 日志系统、MVCC、快照读和当前读等来支持事务的 ACID 原则。</p><ul><li>日志系统： 管理记录 undo log 和 redo log。在事务间存在死锁时，需要回滚某个事务解开死锁，通过 undo log 可以回溯某个事务的操作。在突然断电或崩溃时，通过 redo log 可以将事务需要进行的操作重现。</li><li>MVCC： InnoDB 的多版本并发控制，实际上就是在每行记录中添加两个隐藏列信息用于记录版本信息，一个是用于记录创建当前行的事务ID(<code>trx_id</code>)，一个是记录当前行上一个版本的地址(回滚指针)。配合 <code>Read view</code> 来对并发事务做隔离。<code>Read view</code> 包含四部分信息，分别是：<ul><li><code>create_trx_id</code>: 创建 <code>Read view</code> 的事务的 id</li><li><code>m_ids</code>: 已开始但未提交完成的事务的 id 列表</li><li><code>min_trx_id</code>: m_ids 中的最小值</li><li><code>max_trx_id</code>: 这个并不是 <code>m_ids</code> 的最大值，而是创建 <code>Read View</code> 时当前数据库中应该给下一个事务的 id 值，也就是全局事务中最大的事务 id 值 + 1；</li></ul></li><li>快照读： 在事务第一次使用读取操作时，创建一个 <code>Read view</code>，读取行时，与当前行的 <code>trx_id</code> 做比较：<ul><li><code>trx_id</code> &lt; <code>min_trx_id</code>： 说明该行的最新修改发生在当前事务之前，可直接取用</li><li><code>trx_id</code> &gt;&#x3D; <code>min_rtx_id</code> &amp;&amp; <code>trx_id</code> &lt; <code>max_trx_id</code> &amp;&amp; (<code>trx_id</code> &#x3D;&#x3D; <code>create_trx_id</code> || <code>trx_id</code> not in <code>m_ids</code>) ： 说明该行的最新修改是由本次事务修改的，或该行的最新修改已经在 <code>Read view</code> 生成前完成了提交，可直接取用。</li><li>不满足上述两个条件的，说明该行信息已经&#x2F;正在被修改，因此需要使用回滚指针到 undo log 中获取之前的版本，直到找到符合上述两个条件之一的版本为止。</li></ul></li><li>当前读： 当前读通过读写锁以及 next-key lock 满足隔离性。</li></ul><h4 id="InnoDB-如何支持不同的隔离级别"><a href="#InnoDB-如何支持不同的隔离级别" class="headerlink" title="InnoDB 如何支持不同的隔离级别"></a>InnoDB 如何支持不同的隔离级别</h4><p>主要讨论 读提交(RC) 以及 可重复读(RR) 两种隔离级别。</p><ul><li>对于 读提交 隔离级别，因为需要满足事务中的读取操作能够读取到当前时间已提交的数据的内容，因此单事务中的每次读取操作都会创建一个 <code>Read view</code>。由于已提交的事务不在 <code>m_ids</code> 中，因此可及时读取到已提交的修改。</li><li>对于 可重复读 隔离级别，使用上述快照读的规则即可。快照读还可避免幻读问题。</li></ul><h4 id="可重复读隔离级别下的幻读现象"><a href="#可重复读隔离级别下的幻读现象" class="headerlink" title="可重复读隔离级别下的幻读现象"></a>可重复读隔离级别下的幻读现象</h4><p>快照读可避免幻读问题，但是在使用<code>selete ... for update</code>、<code>update</code>、<code>insert</code>、<code>delete</code> 等操作时，使用的是当前读。<br>事务在一开始使用<code>selete * from t where id &gt; 2</code> 语句时，使用快照读获取相关信息，如之后再使用<code>selete * from t where id &gt; 2 for update</code> 时，则是使用当前读读取相关信息。这中间如果有其他事务插入了新的 <code>id &gt; 2</code> 的行的话，则会出现幻读。<br>如在一开始就使用<code>selete * from t where id &gt; 2 for update</code> 语句的话，会添加 next-key lock，这时如果有其他事务要对范围内的数据做增删时需要等待该事务提交完成。</p><h3 id="学习网站："><a href="#学习网站：" class="headerlink" title="学习网站："></a>学习网站：</h3><p><a href="https://www.xiaolincoding.com/mysql/transaction/mvcc.html">事务隔离级别是怎么实现的？</a><br><a href="https://www.xiaolincoding.com/mysql/transaction/phantom.html">MySQL 可重复读隔离级别，完全解决幻读了吗？</a><br><a href="https://pdai.tech/md/db/sql-mysql/sql-mysql-mvcc.html">MySQL - MySQL InnoDB的MVCC实现机制</a><br><a href="https://pdai.tech/md/db/sql/sql-db-theory.html">SQL DB - 数据库系统核心知识点</a><br><a href="https://draveness.me/mysql-innodb/">『浅入浅出』MySQL 和 InnoDB</a></p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL 学习(1)</title>
    <link href="/2024/04/11/MySQL-%E5%AD%A6%E4%B9%A0-1/"/>
    <url>/2024/04/11/MySQL-%E5%AD%A6%E4%B9%A0-1/</url>
    
    <content type="html"><![CDATA[<h3 id="数据引擎"><a href="#数据引擎" class="headerlink" title="数据引擎"></a>数据引擎</h3><p>MySQL 默认使用 InnoDB 作为数据引擎，InnoDB 使用 B+树 做索引。</p><h4 id="B-树"><a href="#B-树" class="headerlink" title="B+树"></a>B+树</h4><p>自平衡多叉搜索树，将信息存储在叶子节点，索引时存在冗余索引，即使在根节点找到了 Key，也需要向下搜索到叶子节点获取具体的数据信息。叶子节点根据 key 升序存储数据，不同节点之间通过链表的形式连接。</p><p>数据信息全部存在叶子节点的好处有：</p><ul><li>可以将索引信息放在内存中，加快索引效率。</li><li>可以方便的进行范围查询或者全局数据查询。</li><li>每次查询深度相同，效率接近。</li></ul><h4 id="InnoDB-中的-B-树"><a href="#InnoDB-中的-B-树" class="headerlink" title="InnoDB 中的 B+树"></a>InnoDB 中的 B+树</h4><p>InnoDB 中 B+树 的每一个节点，都是一个数据页(16KB，优化磁盘读取，每次读取多个磁道)，数据页中包含页头、目录、用户数据等信息。</p><ul><li>对于叶子节点，页头中包含排序中下一个叶子节点的首地址。</li><li>目录中存储多个偏移量，目录与用户数据的关系可以看成一个 2 层的 B+树，目录是根，用户数据是叶子节点。用于快速找到索引信息。</li><li>用户数据，用户数据分成 <strong>多块</strong> 存储多个具体信息，每条信息包含索引值，存储的数据(非叶子节点保存索引信息，叶子节点保存数据库中的一行的信息)，同时还存有下一条数据的指针地址。每块的最大值的信息中还保存这块中真实数据的数量(第一块为2，其余块不大于8)，目录的偏移量指向的就是每块的最大值。</li></ul><p>搜索时对于每个节点，先二分目录，找到对应块，再从对应块中根据索引迭代，拿到具体信息。</p><h3 id="MySQL-的大体结构"><a href="#MySQL-的大体结构" class="headerlink" title="MySQL 的大体结构"></a>MySQL 的大体结构</h3><p>MySQL 分为两层，server 和 数据引擎 层。server 层大概分为 连接器、词法分析、语法分析、预处理器、优化器、执行器 这几个模块。</p><h4 id="连接器"><a href="#连接器" class="headerlink" title="连接器"></a>连接器</h4><p>用于跟客户端做连接，接收客户端请求，处理权限及连接状态等信息。</p><blockquote><p>早期的 MySQL 还会有请求缓存，对于相同请求会去缓存中获取信息，后来因为命中率太低给去掉了。</p></blockquote><h4 id="词法分析和语法分析"><a href="#词法分析和语法分析" class="headerlink" title="词法分析和语法分析"></a>词法分析和语法分析</h4><p>主要分析 Sql 语句是否正确。</p><h4 id="预处理器"><a href="#预处理器" class="headerlink" title="预处理器"></a>预处理器</h4><p>查询 Sql 语句需要的表是否存在等。</p><h4 id="优化器"><a href="#优化器" class="headerlink" title="优化器"></a>优化器</h4><p>对操作进行优化，判断该如何查询数据。对于有索引的请求，判断是主索引还是二级索引，确定该去哪个&#x2F;些索引树上找数据。判断索引覆盖等。</p><blockquote><p>索引覆盖：对于二级索引来说，如果需要的数据都能在该索引树中获取，那么就不需要从二级索引中拿到主索引，再去主索引树中获取具体信息了。</p></blockquote><h4 id="执行器"><a href="#执行器" class="headerlink" title="执行器"></a>执行器</h4><p>跟数据引擎交互的模块，跟数据引擎交互，并判断是否完成等。</p><ul><li>对于复合索引，遵从左匹配原则，如果索引为 (a,b)，查询条件为 b 是无法利用上该索引的。</li><li>对于复合索引，如果右边的索引失效了，早期的 MySQL 在从 数据引擎 中拿到数据时，执行器会再去主索引获取该条记录的信息，再判断索引条件是否匹配；新版的 MySQL 在这种情况下，会在执行器中判断拿到的数据是否符合索引条件，符合之后再去主索引树中获取具体信息。(索引下推)</li><li>执行器每拿到一条数据就将一条数据返回给客户端了。</li></ul><h3 id="学习网站："><a href="#学习网站：" class="headerlink" title="学习网站："></a>学习网站：</h3><p><a href="https://www.xiaolincoding.com/MySQL/base/how_select.html#MySQL-%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B%E6%98%AF%E6%80%8E%E6%A0%B7%E7%9A%84">执行一条 select 语句，期间发生了什么？</a><br><a href="https://www.xiaolincoding.com/MySQL/index/page.html">从数据页的角度看 B+ 树</a><br><a href="https://www.xiaolincoding.com/MySQL/index/why_index_chose_bpuls_tree.html">为什么 MySQL 采用 B+ 树作为索引？</a></p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
